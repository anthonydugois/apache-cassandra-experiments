bindings:
  seq_key:
    SaveLong("id") -> long;
    TEMPLATE(valuesizedist,); ToLong() -> long;
    SaveLong("size") -> long;
    Template("{}_{}", Flow(LoadLong("size") -> long, Pad("0", 8) -> String), Flow(LoadLong("id") -> long, Pad("0", TEMPLATE(keysize,16)) -> String)) -> String
  seq_value:
    SaveLong("id") -> long;
    TEMPLATE(valuesizedist,); ToLong() -> long;
    Div(10);
    SaveLong("size") -> long;
    LoadLong("id") -> long;
    CharBufImage("a-zA-Z0-9", 10000000, LoadLong("size") -> long) -> java.nio.CharBuffer; ToString() -> String
  rw_key:
    TEMPLATE(keydist,); ToLong() -> long;
    SaveLong("id") -> long;
    TEMPLATE(valuesizedist,); ToLong() -> long;
    SaveLong("size") -> long;
    Template("{}_{}", Flow(LoadLong("size") -> long, Pad("0", 8) -> String), Flow(LoadLong("id") -> long, Pad("0", TEMPLATE(keysize,16)) -> String)) -> String
  rw_value:
    SaveLong("id") -> long;
    Hash() -> long;
    TEMPLATE(valuesizedist,); ToLong() -> long;
    SaveLong("size") -> long;
    LoadLong("id") -> long;
    CharBufImage("a-zA-Z0-9", 10000000, LoadLong("size") -> long) -> java.nio.CharBuffer; ToString() -> String

blocks:
  schema:
    params:
      timeout: 30.0
    ops:
      create-keyspace:
        type: simple
        stmt: |
          CREATE KEYSPACE IF NOT EXISTS TEMPLATE(keyspace,baselines)
          WITH REPLICATION = {'class': 'SimpleStrategy', 'replication_factor': TEMPLATE(rf,1)}
          AND DURABLE_WRITES = true;
      create-table:
        type: simple
        stmt: |
          CREATE TABLE IF NOT EXISTS TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) (
            key text,
            f0 text,
            f1 text,
            f2 text,
            f3 text,
            f4 text,
            f5 text,
            f6 text,
            f7 text,
            f8 text,
            f9 text,
            PRIMARY KEY (key)
          ) WITH compression = {'enabled': false} AND speculative_retry = 'NONE';
  rampup:
    params:
      cl: LOCAL_ONE
      timeout: 30.0
    ops:
      rampup-insert:
        type: prepared
        stmt: |
          INSERT INTO TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) (key, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9)
          VALUES ({seq_key}, {seq_value}, {seq_value}, {seq_value}, {seq_value}, {seq_value}, {seq_value}, {seq_value}, {seq_value}, {seq_value}, {seq_value});
  main-read:
    params:
      ratio: TEMPLATE(readratio,1)
      cl: LOCAL_ONE
      timeout: 2.0
    ops:
      main-select:
        type: prepared
        stmt: |
          SELECT * FROM TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) WHERE key = {rw_key} LIMIT 1;
  main-write:
    params:
      ratio: TEMPLATE(writeratio,1)
      cl: LOCAL_ONE
      timeout: 2.0
    ops:
      main-insert:
        type: prepared
        stmt: |
          INSERT INTO TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) (key, value) VALUES ({rw_key}, {rw_value});
